{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["url","getTodos","a","fetch","response","json","getUser","userId","TodoList","useState","inputValue","setInputValue","todos","setTodos","optionValue","setOptionValue","hasLoadingError","setHasLoadingError","filterTodo","filter","todo","title","toLocaleLowerCase","includes","useEffect","then","todosFromServer","error","finishTodo","currentTodo","completed","filterSelect","className","value","placeholder","onChange","event","currentTarget","map","classname","type","checked","readOnly","onClick","id","CurrentUser","clear","selectedUser","setSelectedUser","user","name","email","phone","App","selectedUserId","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a6c3d8f.chunk.js","sourcesContent":["const url = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${url}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${url}/usersq/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classname from 'classnames';\nimport { getTodos } from '../../api/api';\n\ntype Props = {\n  userId: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ userId }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [optionValue, setOptionValue] = useState('');\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const filterTodo = todos\n    .filter(todo => todo.title.toLocaleLowerCase()\n      .includes(inputValue.toLocaleLowerCase()));\n\n  useEffect(() => {\n    try {\n      getTodos()\n        .then((todosFromServer: Todo[]) => setTodos(todosFromServer));\n    } catch (error) {\n      setHasLoadingError(true);\n    }\n  }, []);\n\n  const filterSelect = (currentTodo: Todo[]) => {\n    switch (optionValue) {\n      case 'active': {\n        return currentTodo.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return currentTodo.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return currentTodo;\n      }\n    }\n  };\n\n  const finishTodo = filterSelect(filterTodo);\n\n  return (\n    <div className=\"TodoList\">\n      {hasLoadingError\n        ? <p>Oops ... Something went wrong...</p>\n        : (\n          <>\n            <h2>Todos:</h2>\n\n            <div className=\"TodoList__list-container\">\n\n              <input\n                className=\"input is-rounded\"\n                value={inputValue}\n                placeholder=\"Enter a title\"\n                onChange={(event) => {\n                  setInputValue(event.currentTarget.value);\n                }}\n              />\n\n              <div className=\"select is-rounded is-small\">\n                <select\n                  value={optionValue}\n                  onChange={(event) => {\n                    setOptionValue(event.currentTarget.value);\n                  }}\n                >\n\n                  <option\n                    value=\"all\"\n                  >\n                    All\n                  </option>\n\n                  <option\n                    value=\"active\"\n                  >\n                    Active\n                  </option>\n\n                  <option\n                    value=\"completed\"\n                  >\n                    Completed\n                  </option>\n\n                </select>\n\n              </div>\n\n              <ul className=\"TodoList__list\">\n                {finishTodo.map(todo => {\n                  return (\n                    <li\n                      key={todo.id}\n                      className={classname('TodoList__item', {\n                        'TodoList__item--checked': todo.completed,\n                        'TodoList__item--unchecked': !todo.completed,\n                      })}\n                    >\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={todo.completed}\n                          readOnly\n                        />\n                        <p>{todo.title}</p>\n                      </label>\n\n                      <button\n                        className=\"\n                          TodoList__user-button\n                          TodoList__user-button--selected\n                          button\n                        \"\n                        type=\"button\"\n                        onClick={() => userId(todo)}\n                      >\n                        {`User #${todo.userId}`}\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  userId: number,\n  clear: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clear }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [hasLoadingError, setHasLoadingError] = useState(true);\n\n  useEffect(() => {\n    try {\n      getUser(userId)\n        .then((user: User) => setSelectedUser(user));\n    } catch (error) {\n      setHasLoadingError(false);\n    }\n  }, [userId]);\n\n  return (\n    <>\n      {\n        hasLoadingError\n          ? (\n            <div className=\"CurrentUser\">\n              {selectedUser\n                ? (\n                  <>\n                    <h2 className=\"CurrentUser__title\">\n                      <span>\n                        {`Selected user: ${selectedUser.id}`}\n                      </span>\n                    </h2>\n\n                    <button\n                      type=\"button\"\n                      className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                      onClick={clear}\n                    >\n                      Clear\n                    </button>\n\n                    <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n                    <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n                    <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n                  </>\n                )\n                : (\n                  'Loading...'\n                )}\n            </div>\n          )\n          : <p>No users yet</p>\n      }\n    </>\n\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const userId = (todo: Todo) => (\n    setSelectedUserId(todo.userId)\n  );\n\n  const clear = () => (\n    setSelectedUserId(0)\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList userId={userId} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} clear={clear} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bulma/css/bulma.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}