{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["url","getTodo","a","fetch","response","json","getUser","userId","TodoList","useState","inputValue","setInputValue","todos","setTodos","optionValue","setOptionValue","filterTodo","filter","todo","title","toLocaleLowerCase","includes","useEffect","then","todosFromServer","finishTodo","currentTodo","completed","filterSelect","className","value","placeholder","onChange","event","currentTarget","map","classname","type","checked","readOnly","onClick","id","CurrentUser","clear","selectedUser","setSelectedUser","user","name","email","phone","App","selectedUserId","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"mVAAMA,EAAM,oCAECC,EAAO,uCAAG,4BAAAC,EAAA,sEACEC,MAAM,GAAD,OAAIH,EAAJ,WADP,cACfI,EADe,yBAGdA,EAASC,QAHK,2CAAH,qDAMPC,EAAO,uCAAG,WAAOC,GAAP,eAAAL,EAAA,sEACEC,MAAM,GAAD,OAAIH,EAAJ,kBAAiBO,IADxB,cACfH,EADe,yBAGdA,EAASC,QAHK,2CAAH,sD,OCCPG,EAA4B,SAAC,GAAgB,IAAdD,EAAa,EAAbA,OAC1C,EAAoCE,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAsB,IAAhD,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsCJ,mBAAS,OAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAEMC,EAAa,YAAIJ,GACpBK,QAAO,SAAAC,GAAI,OAAIA,EAAKC,MAAMC,oBACxBC,SAASX,EAAWU,wBAEzBE,qBAAU,WACRrB,IACGsB,MAAK,SAACC,GAAD,OAA6BX,EAASW,QAC7C,IAEH,IAgBMC,EAhBe,SAACC,GACpB,OAAQZ,GACN,IAAK,SACH,OAAOY,EAAYT,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKS,aAGzC,IAAK,YACH,OAAOD,EAAYT,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKS,aAGzC,QACE,OAAOD,GAKME,CAAaZ,GAEhC,OACE,sBAAKa,UAAU,WAAf,UACE,wCAEA,sBAAKA,UAAU,2BAAf,UAEE,uBACEA,UAAU,mBACVC,MAAOpB,EACPqB,YAAY,gBACZC,SAAU,SAACC,GACTtB,EAAcsB,EAAMC,cAAcJ,UAItC,qBAAKD,UAAU,6BAAf,SACE,yBACEC,MAAOhB,EACPkB,SAAU,SAACC,GACTlB,EAAekB,EAAMC,cAAcJ,QAHvC,UAOE,wBACEA,MAAM,MADR,iBAMA,wBACEA,MAAM,SADR,oBAMA,wBACEA,MAAM,YADR,4BAUJ,oBAAID,UAAU,iBAAd,SACGJ,EAAWU,KAAI,SAAAjB,GACd,OACE,qBAEEW,UAAWO,IAAU,iBAAkB,CACrC,0BAA2BlB,EAAKS,UAChC,6BAA8BT,EAAKS,YAJvC,UAOE,kCACE,uBACEU,KAAK,WACLC,QAASpB,EAAKS,UACdY,UAAQ,IAEV,4BAAIrB,EAAKC,WAGX,wBACEU,UAAU,iEAKVQ,KAAK,SACLG,QAAS,kBAAMjC,EAAOW,IAPxB,yBASYA,EAAKX,YAxBZW,EAAKuB,gBCjFbC,G,MAA+B,SAAC,GAAuB,IAArBnC,EAAoB,EAApBA,OAAQoC,EAAY,EAAZA,MACrD,EAAwClC,qBAAxC,mBAAOmC,EAAP,KAAqBC,EAArB,KAOA,OALAvB,qBAAU,WACRhB,EAAQC,GACLgB,MAAK,SAACuB,GAAD,OAAgBD,EAAgBC,QACvC,CAACvC,IAGF,qBAAKsB,UAAU,cAAf,SACGe,EAEG,qCACE,oBAAIf,UAAU,qBAAd,SAAmC,wDAAyBe,EAAaH,QAEzE,wBACEJ,KAAK,SACLR,UAAU,iEAKVW,QAAS,kBACPG,KARJ,mBAcA,oBAAId,UAAU,oBAAd,SAAmCe,EAAaG,OAChD,mBAAGlB,UAAU,qBAAb,SAAmCe,EAAaI,QAChD,mBAAGnB,UAAU,qBAAb,SAAmCe,EAAaK,WAIlD,iBCPKC,EA/BO,WACpB,MAGIzC,mBAAS,GAHb,mBACE0C,EADF,KAEEC,EAFF,KAaA,OACE,sBAAKvB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAUtB,OAXD,SAACW,GAAD,OACbkC,EAAkBlC,EAAKX,aAarB,qBAAKsB,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGsB,EACC,cAAC,EAAD,CAAa5C,OAAQ4C,EAAgBR,MAbjC,kBACZS,EAAkB,MAaR,2B,MC1BdC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f3c28312.chunk.js","sourcesContent":["const url = 'https://mate.academy/students-api';\n\nexport const getTodo = async () => {\n  const response = await fetch(`${url}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number) => {\n  const response = await fetch(`${url}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classname from 'classnames';\nimport { getTodo } from '../../api/api';\n\ntype Props = {\n  userId: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ userId }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [todos, setTodos] = useState<Todo[] | []>([]);\n  const [optionValue, setOptionValue] = useState('123');\n\n  const filterTodo = [...todos]\n    .filter(todo => todo.title.toLocaleLowerCase()\n      .includes(inputValue.toLocaleLowerCase()));\n\n  useEffect(() => {\n    getTodo()\n      .then((todosFromServer: Todo[]) => setTodos(todosFromServer));\n  }, []);\n\n  const filterSelect = (currentTodo: Todo[]) => {\n    switch (optionValue) {\n      case 'active': {\n        return currentTodo.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return currentTodo.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return currentTodo;\n      }\n    }\n  };\n\n  const finishTodo = filterSelect(filterTodo);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n\n        <input\n          className=\"input is-rounded\"\n          value={inputValue}\n          placeholder=\"Enter a title\"\n          onChange={(event) => {\n            setInputValue(event.currentTarget.value);\n          }}\n        />\n\n        <div className=\"select is-rounded is-small\">\n          <select\n            value={optionValue}\n            onChange={(event) => {\n              setOptionValue(event.currentTarget.value);\n            }}\n          >\n\n            <option\n              value=\"all\"\n            >\n              All\n            </option>\n\n            <option\n              value=\"active\"\n            >\n              Active\n            </option>\n\n            <option\n              value=\"completed\"\n            >\n              Completed\n            </option>\n\n          </select>\n\n        </div>\n\n        <ul className=\"TodoList__list\">\n          {finishTodo.map(todo => {\n            return (\n              <li\n                key={todo.id}\n                className={classname('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => userId(todo)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  userId: number,\n  clear: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clear }) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(userId)\n      .then((user: User) => setSelectedUser(user));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {selectedUser\n        ? (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser.id}`}</span></h2>\n\n            <button\n              type=\"button\"\n              className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n              onClick={() => (\n                clear()\n              )}\n            >\n              Clear\n            </button>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n          </>\n        )\n        : (\n          'Loading...'\n        )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const userId = (todo: Todo) => (\n    setSelectedUserId(todo.userId)\n  );\n\n  const clear = () => (\n    setSelectedUserId(0)\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList userId={userId} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} clear={clear} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bulma/css/bulma.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}